// Copyright 2023 AIT Austrian Institute of Technology
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#ifndef TRAJECTORY_PLUGINS__PID_TRAJECTORY_PLUGIN_HPP_
#define TRAJECTORY_PLUGINS__PID_TRAJECTORY_PLUGIN_HPP_

#include <memory>
#include <vector>

#include "control_toolbox/pid.hpp"
#include "joint_trajectory_controller/trajectory_controller_base.hpp"

#include "pid_trajectory_plugin_parameters.hpp"  // auto-generated by generate_parameter_library
#include "trajectory_plugins/visibility_control.h"

using PidPtr = std::shared_ptr<control_toolbox::Pid>;

namespace trajectory_plugins
{

class PidTrajectoryPlugin : public joint_trajectory_controller::TrajectoryControllerBase
{
public:
  bool initialize(rclcpp_lifecycle::LifecycleNode::SharedPtr node) override;

  bool computeGains(const trajectory_msgs::msg::JointTrajectory trajectory) override;

  void computeCommands(
    std::vector<double> & tmp_command, const trajectory_msgs::msg::JointTrajectoryPoint current,
    const trajectory_msgs::msg::JointTrajectoryPoint error,
    const trajectory_msgs::msg::JointTrajectoryPoint desired, const rclcpp::Time & time,
    const rclcpp::Duration & period) override;

  void reset() override;

protected:
  // the node handle for parameter handling
  rclcpp_lifecycle::LifecycleNode::SharedPtr node_;
  // PID controllers
  std::vector<PidPtr> pids_;
  // Feed-forward velocity weight factor when calculating closed loop pid adapter's command
  std::vector<double> ff_velocity_scale_;

  // Parameters from ROS for joint_trajectory_controller
  std::shared_ptr<ParamListener> param_listener_;
  Params params_;
};

}  // namespace trajectory_plugins

#endif  // TRAJECTORY_PLUGINS__PID_TRAJECTORY_PLUGIN_HPP_
