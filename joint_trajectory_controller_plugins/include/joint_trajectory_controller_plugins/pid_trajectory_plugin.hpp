// Copyright 2023 AIT Austrian Institute of Technology
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#ifndef JOINT_TRAJECTORY_CONTROLLER_PLUGINS__PID_TRAJECTORY_PLUGIN_HPP_
#define JOINT_TRAJECTORY_CONTROLLER_PLUGINS__PID_TRAJECTORY_PLUGIN_HPP_

#include <memory>
#include <string>
#include <vector>

#include "control_toolbox/pid.hpp"

#include "joint_trajectory_controller_plugins/trajectory_controller_base.hpp"
#include "joint_trajectory_controller_plugins/visibility_control.h"
#include "pid_trajectory_plugin_parameters.hpp"  // auto-generated by generate_parameter_library

using PidPtr = std::shared_ptr<control_toolbox::Pid>;

namespace joint_trajectory_controller_plugins
{

class PidTrajectoryPlugin : public TrajectoryControllerBase
{
public:
  bool initialize(
    rclcpp_lifecycle::LifecycleNode::SharedPtr node,
    std::vector<size_t> map_cmd_to_joints) override;

  bool configure() override;

  bool activate() override;

  bool compute_control_law_non_rt_impl(
    const std::shared_ptr<trajectory_msgs::msg::JointTrajectory> & /*trajectory*/) override
  {
    // nothing to do
    return true;
  }

  bool compute_control_law_rt_impl(
    const std::shared_ptr<trajectory_msgs::msg::JointTrajectory> & /*trajectory*/) override
  {
    // nothing to do
    return true;
  }

  bool update_gains_rt() override;

  void compute_commands(
    std::vector<double> & tmp_command, const trajectory_msgs::msg::JointTrajectoryPoint current,
    const trajectory_msgs::msg::JointTrajectoryPoint error,
    const trajectory_msgs::msg::JointTrajectoryPoint desired,
    const rclcpp::Duration & duration_since_start, const rclcpp::Duration & period) override;

  void reset() override;

  void start() override
  {
    // nothing to do
  }

protected:
  /**
   * @brief parse PID gains from parameter struct
   */
  void parseGains();

  // number of command joints
  size_t num_cmd_joints_;
  // map from joints in the message to command joints
  std::vector<size_t> map_cmd_to_joints_;
  // PID controllers
  std::vector<PidPtr> pids_;
  // Feed-forward velocity weight factor when calculating closed loop pid adapter's command
  std::vector<double> ff_velocity_scale_;

  // Parameters from ROS for joint_trajectory_controller_plugins
  std::shared_ptr<ParamListener> param_listener_;
  Params params_;
};

}  // namespace joint_trajectory_controller_plugins

#endif  // JOINT_TRAJECTORY_CONTROLLER_PLUGINS__PID_TRAJECTORY_PLUGIN_HPP_
